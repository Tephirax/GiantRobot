<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mech</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_AffectedByGravity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise variables
event_inherited();

// Non-gravitational Movement
thrustpwr = 10;
thrustmax = 1.5;
rotation = 0;

phy_fixed_rotation = true;
phy_rotation = rotation;

// Gravitational Movement
walkspeed = 0.7;
hoverpwr = -1;
jumppwr = -12;
jumping = false;
falling = false;

/* State Initialisation */
show_debug_message("About to initialise mech object FSM");
stateinit(st_mech_idle); // initializes the FSM
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get gravity handling from parent
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for input &amp; change state if required
// Thrusters
if ( !GameState.isPaused ) { // If the game is not paused
    if ( !GameState.isMenu ) { // If a menu is not open
        if ( GameState.control ) { // If the player has control
            
            // Non-gravitational movement
            if ( !gravityActive ) {
                if ( string_pos('thrusters', InputController.input) != 0 ) {
                    statechange(st_mech_thrust);
                }
                else if ( InputController.input == 'statechangethrustidle' &amp;&amp; obj_mech._state != st_mech_thrust_idle ) { 
                    statechange(st_mech_thrust_idle);
                } 
            } 
            
            // Gravitational movement
            else {
                // Impact
                if ( falling &amp;&amp; place_meeting(x, y, obj_wall) ) {
                    statechange(st_mech_impact);
                }
                // Other
                else {
                    if ( !jumping &amp;&amp; !falling &amp;&amp; InputController.input == 'statechangejump' &amp;&amp; obj_mech._state != st_mech_jump ) {
                        statechange(st_mech_jump);
                    }
                    else if ( InputController.input == 'statechangehover' &amp;&amp; obj_mech._state != st_mech_hover ) {
                        statechange(st_mech_hover);
                    }
                    else if ( InputController.input == 'statechangeleft' &amp;&amp; obj_mech._state != st_mech_left ) {
                        statechange(st_mech_left);
                    }
                    else if ( InputController.input == 'statechangeright' &amp;&amp; obj_mech._state != st_mech_right ) {
                        statechange(st_mech_right);
                    }
                    else if ( InputController.input == 'statechangeidle' &amp;&amp; obj_mech._state != st_mech_idle ) {
                        statechange(st_mech_idle);
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Increment &amp; Handle State
stateact(0); // performs action 0 of the state
stateinc(); // adds to the state timer

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_crate">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Dummy collision code
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.200000002980232</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,4</point>
    <point>28,4</point>
    <point>28,44</point>
    <point>4,44</point>
  </PhysicsShapePoints>
</object>
