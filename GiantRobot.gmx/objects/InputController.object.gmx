<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise variables
for (i = 0; i &lt; GameState.numOfCompartments; i++) {
    gravity_change[i] = false;
}

input = '';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get inputs
// Debug gravity controls

if ( keyboard_check(ord('1')) ) {
    keyboard_clear(ord('1'));
    gravity_change[0] = true;
    show_debug_message('gravity_change in compartment 0 = true');
}
else if ( keyboard_check(ord('2')) ) {
    keyboard_clear(ord('2'));
    gravity_change[1] = true;
    show_debug_message('gravity_change in compartment 1 = true');
}

// Non-Gravitational Inputs
// Lateral Thrust (if no gravity)
if ( !obj_mech.gravityActive ) {
    if ( keyboard_check(vk_left) || keyboard_check(vk_right) 
      || keyboard_check(vk_up) || keyboard_check(vk_down) ) {
        input = 'thrusters.';
        if ( keyboard_check(vk_left) ) {
            input = input + 'l';
        } else {
            input = input + ' ';
        }
        if ( keyboard_check(vk_right) ) {
            input = input + 'r';
        } else {
            input = input + ' ';
        }
        if ( keyboard_check(vk_up) ) {
            input = input + 'u';
        } else {
            input = input + ' ';
        }
        if ( keyboard_check(vk_down) ) {
            input = input + 'd';
        } else {
            input = input + ' ';
        }
        show_debug_message('input = ' + input);
    }
    // Idle
    else {
        input = 'statechangethrustidle';
    }
}

// Gravitational Inputs
// Walking
else {
    if ( obj_mech.jumping || obj_mech.falling ) {
        if ( keyboard_check(vk_left) ) {
            input = 'jumpleft';
        } else if ( keyboard_check(vk_right) ) {
            input = 'jumpright';
        }
    }
    else if ( keyboard_check(vk_space) ) {
        // If already in mid-air, hover
        /*if ( obj_mech.falling ) {
            input = 'statechangehover';
        }*/
        // Otherwise, jump 
        //else {
            input = 'statechangejump';
        //}
    }
    else if ( keyboard_check(vk_left) ) {
        input = 'statechangeleft';
    } else if ( keyboard_check(vk_right) ) {
        input = 'statechangeright';
    } else {
        input = 'statechangeidle';
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
